{"version":3,"sources":["game/domain/CardData.model.ts","game/store/hooks.ts","game/store/selectors.ts","game/domain/CardData.utils.ts","game/domain/deckGenerator.ts","game/store/GameState.utils.ts","game/store/gameSlice.ts","game/components/Card/Card.tsx","game/components/item.constants.ts","game/components/DropZone/DropZone.tsx","game/components/CardDraggable/CardDraggable.tsx","game/components/Deck/Deck.tsx","game/components/GameControl/GameControl.tsx","game/components/Pile/PileBase.tsx","game/components/Pile/Foundation.tsx","game/components/Pile/Pile.tsx","game/components/Game/Game.tsx","game/store/store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardSymbol","CardValue","useAppDispatch","useDispatch","useAppSelector","useSelector","selectGame","state","game","cardValues","ace","two","three","four","five","six","seven","eight","nine","ten","jack","queen","king","cardSymbols","clubs","spades","hearts","diamonds","cardValueSignsMap","isCardRed","symbol","includes","canPutCardOnPile","card","target","bothRevealed","revealed","isCardValueOneLower","value","isCardOppositeColor","canPutCardOnFoundation","hasNotCardOnTop","cardOnTop","isCardValueOneHigher","isCardSameSymbol","isKing","item","isAce","deckShuffle","cards","array","randomIndex","currentIndex","length","Math","floor","random","shuffle","createGame","deck","reduce","acc","cardsOfSymbol","map","sign","id","concat","prevIndex","Object","keys","piles","forEach","key","index","nextIndex","cardsForPile","slice","Error","firstCard","shift","prevCard","nextCard","cardArrayToStock","stock","waste","foundations","undefined","checkWin","traversePile","node","currentKey","initialState","p0","p1","p2","p3","p4","p5","p6","f0","f1","f2","f3","movesCounter","gameEnded","gameSlice","createSlice","name","reducers","move","action","cardId","targetId","matchRef","traversePileAndTake","traversePileAndPut","i","splice","moveCardById","payload","restart","reveal","draw","push","actions","Card","className","classNames","ItemTypes","DropZone","onDropHandler","canDropPredicate","useDrop","accept","canDrop","drop","collect","monitor","isSomethingDragging","getClientOffset","isOver","ref","style","backgroundColor","CardDraggable","pileProps","dispatch","useDrag","type","canDrag","isDragging","drag","useCallback","canPutCardOnCard","onClickHandler","opacity","onClick","stacked","Deck","firstCardOnStock","prelastCardOnWaste","lastCardOnWaste","GameControl","PileBase","canPutOnPileBase","Foundation","props","Pile","Game","gameState","DndProvider","backend","HTML5Backend","store","configureStore","reducer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb092783.chunk.js","sourcesContent":["export interface CardData {\r\n  id: string;\r\n  symbol: CardSymbol;\r\n  value: CardValue;\r\n  revealed: boolean;\r\n  cardOnTop?: CardData;\r\n}\r\n\r\nexport enum CardSymbol {\r\n  clubs = '♣',\r\n  spades = '♠',\r\n  diamonds = '♦',\r\n  hearts = '♥',\r\n};\r\n\r\nexport enum CardValue {\r\n  ace,\r\n  two,\r\n  three,\r\n  four,\r\n  five,\r\n  six,\r\n  seven,\r\n  eight,\r\n  nine,\r\n  ten,\r\n  jack,\r\n  queen,\r\n  king\r\n};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { RootState } from \"./store\";\r\n\r\nexport const selectGame = (state: RootState) => state.game;\r\nexport const selectCount = (state: RootState) => state.game.movesCounter;","import { CardValue, CardSymbol, CardData } from \"./CardData.model\";\r\n\r\n\r\nexport const cardValues = [\r\n  CardValue.ace,\r\n  CardValue.two,\r\n  CardValue.three,\r\n  CardValue.four,\r\n  CardValue.five,\r\n  CardValue.six,\r\n  CardValue.seven,\r\n  CardValue.eight,\r\n  CardValue.nine,\r\n  CardValue.ten,\r\n  CardValue.jack,\r\n  CardValue.queen,\r\n  CardValue.king,\r\n];\r\n\r\nexport const cardSymbols = [\r\n  CardSymbol.clubs,\r\n  CardSymbol.spades,\r\n  CardSymbol.hearts,\r\n  CardSymbol.diamonds,\r\n];\r\n\r\nexport const cardValueSignsMap = {\r\n  [CardValue.ace]: 'A',\r\n  [CardValue.two]: '2',\r\n  [CardValue.three]: '3',\r\n  [CardValue.four]: '4',\r\n  [CardValue.five]: '5',\r\n  [CardValue.six]: '6',\r\n  [CardValue.seven]: '7',\r\n  [CardValue.eight]: '8',\r\n  [CardValue.nine]: '9',\r\n  [CardValue.ten]: '10',\r\n  [CardValue.jack]: 'J',\r\n  [CardValue.queen]: 'Q',\r\n  [CardValue.king]: 'K',\r\n}\r\n\r\nexport function cardArrayToStock(cards: CardData[]) {\r\n  if (!cards.length) throw Error('CardData[] can not be empty');\r\n  const firstCard = cards.shift() as CardData;\r\n  return cards.reduce((prevCard, nextCard) => {\r\n    nextCard.cardOnTop = prevCard;\r\n    return nextCard;\r\n  }, firstCard);\r\n}\r\n\r\nexport function isCardRed(symbol: CardSymbol) {\r\n  return [CardSymbol.diamonds, CardSymbol.hearts].includes(symbol);\r\n}\r\n\r\nexport function isCardBlack(symbol: CardSymbol) {\r\n  return [CardSymbol.spades, CardSymbol.clubs].includes(symbol);\r\n}\r\n\r\nexport function canPutCardOnPile(card: CardData, target: CardData) {\r\n  const bothRevealed = card.revealed && target.revealed;\r\n  const isCardValueOneLower = +card.value + 1 === +target.value;\r\n  const isCardOppositeColor = isCardRed(card.symbol) !== isCardRed(target.symbol);\r\n  return bothRevealed && isCardValueOneLower && isCardOppositeColor;\r\n}\r\n\r\nexport function canPutCardOnFoundation(card: CardData, target: CardData) {\r\n  const hasNotCardOnTop = !card.cardOnTop;\r\n  const bothRevealed = card.revealed && target.revealed;\r\n  const isCardValueOneHigher = +card.value === +target.value + 1;\r\n  const isCardSameSymbol = card.symbol === target.symbol;\r\n  return hasNotCardOnTop && bothRevealed && isCardValueOneHigher && isCardSameSymbol;\r\n}\r\n\r\nexport const isKing = (item: CardData) => item.value === CardValue.king;\r\nexport const isAce = (item: CardData) => item.value === CardValue.ace;\r\n","import { CardData, CardValue } from \"./CardData.model\";\r\nimport { cardSymbols, cardValues, cardValueSignsMap } from \"./CardData.utils\";\r\n\r\nexport function deckGenerator(): CardData[] {\r\n  return cardSymbols.reduce<CardData[]>((acc, symbol) => {\r\n    const cardsOfSymbol = cardValues.map<CardData>((sign: CardValue) => {\r\n      return {\r\n        id: cardValueSignsMap[sign] + symbol,\r\n        symbol: symbol,\r\n        value: sign,\r\n        revealed: false,\r\n      };\r\n    });\r\n    return acc.concat(cardsOfSymbol);\r\n  }, []);\r\n}\r\n\r\nexport function deckShuffle(cards: CardData[]): CardData[] {\r\n  return shuffle(cards);\r\n}\r\n\r\n// Fisher-Yates (aka Knuth) Shuffle - https://stackoverflow.com/a/2450976\r\nfunction shuffle<T>(array: T[]) {\r\n  let currentIndex = array.length,  randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (currentIndex !== 0) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\r\n  }\r\n\r\n  return array;\r\n}\r\n","import { CardData, CardValue } from \"../domain/CardData.model\";\r\nimport { cardArrayToStock } from \"../domain/CardData.utils\";\r\nimport { deckGenerator, deckShuffle } from \"../domain/deckGenerator\";\r\nimport { GameState } from \"./GameState.model\";\r\n\r\nexport function moveCardById(state: GameState, cardId: string, targetId: string): any {\r\n  let matchRef: CardData | undefined;\r\n\r\n  // closure fun with matchRef; recursively walks through pile; in case of match, sets matchRef and remove matched card as side effect;\r\n  const traversePileAndTake = (node: CardData) => {\r\n    if (node.cardOnTop) {\r\n      if (node.cardOnTop.id === cardId) {\r\n        matchRef = node.cardOnTop;\r\n        node.cardOnTop = undefined;\r\n      } else {\r\n        traversePileAndTake(node.cardOnTop);\r\n      }\r\n    }\r\n  }\r\n\r\n  // closure fun with matchRef; recursively walks through pile; in case of match, put matchRef in target;\r\n  const traversePileAndPut = (node: CardData | undefined) => {\r\n    if (node) {\r\n      if (node.id === targetId ) {\r\n        if (node.cardOnTop !== undefined) throw Error('There is already a card on top!');\r\n        node.cardOnTop = matchRef;\r\n      } else {\r\n        traversePileAndPut(node.cardOnTop);\r\n      }\r\n    }\r\n  }\r\n\r\n  // TODO: add waste\r\n\r\n  // take card...\r\n  for (let i of Object.keys(state.piles)) {\r\n    if (state.piles[i]) {\r\n      if (state.piles[i]!.id === cardId) {\r\n        matchRef = state.piles[i];\r\n        state.piles[i] = undefined;\r\n        break;\r\n      } else {\r\n        traversePileAndTake(state.piles[i] as CardData);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!matchRef)\r\n  for (let i of Object.keys(state.foundations)) {\r\n    if (state.foundations[i]) {\r\n      if (state.foundations[i]!.id === cardId) {\r\n        matchRef = state.foundations[i];\r\n        state.foundations[i] = undefined;\r\n        break;\r\n      } else {\r\n        traversePileAndTake(state.foundations[i] as CardData);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!matchRef)\r\n  for(let i = 0; i < state.waste.length; i++) {\r\n    const card = state.waste[i];\r\n    if (card.id === cardId) {\r\n      matchRef = card;\r\n      state.waste.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n\r\n  // ... and put it in target place\r\n  for (let i of Object.keys(state.piles)) {\r\n    if (i === targetId) {\r\n      state.piles[i] = matchRef;\r\n    } else {\r\n      traversePileAndPut(state.piles[i]);\r\n    }\r\n  }\r\n  for (let i of Object.keys(state.foundations)) {\r\n    if (i === targetId) {\r\n      state.foundations[i] = matchRef;\r\n    } else {\r\n      traversePileAndPut(state.foundations[i]);\r\n    }\r\n  }\r\n}\r\n\r\nexport function createGame(state: GameState) {\r\n  const deck = deckShuffle(deckGenerator());\r\n  \r\n  let prevIndex = 0;\r\n  Object.keys(state.piles).forEach((key, index) => {\r\n    const nextIndex = prevIndex + index + 1;\r\n    const cardsForPile = deck.slice(prevIndex, nextIndex);\r\n    cardsForPile[0].revealed = true;\r\n    state.piles[key] = cardArrayToStock(cardsForPile);\r\n    prevIndex = nextIndex;\r\n  });\r\n\r\n  state.stock = deck.slice(prevIndex);\r\n  state.waste = [];\r\n\r\n  Object.keys(state.foundations).forEach((key, index) => {\r\n    state.foundations[key] = undefined;\r\n  })\r\n}\r\n\r\nexport function reveal(state: GameState, cardId: string) {\r\n  const traversePile = (node: CardData | undefined) => {\r\n    if (node) {\r\n      if (node.id === cardId ) {\r\n        node.revealed = true;\r\n      } else {\r\n        traversePile(node.cardOnTop);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i of Object.keys(state.piles)) {\r\n    traversePile(state.piles[i]);\r\n  }\r\n}\r\n\r\nexport function draw(state: GameState) {\r\n  if (state.stock.length) {\r\n    const card = state.stock.shift() as CardData; // force CardData to be not undefines, we are checking if it exists in conditional above\r\n    state.waste.push({...card, revealed: true});\r\n  } else {\r\n    state.stock = state.waste.map(card => ({...card, revealed: false}));\r\n    state.waste = [];\r\n  }\r\n}\r\n\r\nexport function checkWin(state: GameState) {\r\n  const traversePile = (node: CardData | undefined): boolean => {\r\n    if (node) {\r\n      if (!node.cardOnTop) {\r\n        return node.value === CardValue.king;\r\n      } else {\r\n        return traversePile(node.cardOnTop);\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return Object.keys(state.foundations).reduce((acc, currentKey) => {\r\n    return acc && traversePile(state.foundations[currentKey]);\r\n  }, true);\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { GameState } from './GameState.model';\r\nimport { checkWin, createGame, draw, moveCardById, reveal } from './GameState.utils';\r\n\r\nconst initialState: GameState = {\r\n  piles: {\r\n    p0: undefined,\r\n    p1: undefined,\r\n    p2: undefined,\r\n    p3: undefined,\r\n    p4: undefined,\r\n    p5: undefined,\r\n    p6: undefined,\r\n  },\r\n  foundations: {\r\n    f0: undefined,\r\n    f1: undefined,\r\n    f2: undefined,\r\n    f3: undefined,\r\n  },\r\n  stock: [],\r\n  waste: [],\r\n  movesCounter: 0,\r\n  gameEnded: false\r\n};\r\n\r\nexport const gameSlice = createSlice({\r\n  name: 'game',\r\n  initialState,\r\n  reducers: {\r\n    move: (state: GameState, action: PayloadAction<{ cardId: string, targetId: string }>) => {\r\n      moveCardById(state, action.payload.cardId, action.payload.targetId);\r\n      state.movesCounter += 1;\r\n      state.gameEnded = checkWin(state);\r\n    },\r\n    restart: (state: GameState) => {\r\n      state.gameEnded = false;\r\n      state.movesCounter = 0;\r\n      createGame(state);\r\n    },\r\n    reveal: (state: GameState, action: PayloadAction<{ cardId: string }>) => {\r\n      reveal(state, action.payload.cardId);\r\n    },\r\n    draw: (state: GameState) => {\r\n      if (state.stock.length) state.movesCounter += 1;\r\n      draw(state);\r\n    },\r\n  },\r\n});\r\n\r\nexport const actions = gameSlice.actions;","import classNames from 'classnames';\r\nimport React from 'react';\r\nimport { CardData } from '../../domain/CardData.model';\r\nimport { isCardRed, cardValueSignsMap, isCardBlack } from '../../domain/CardData.utils';\r\n\r\nimport './Card.css';\r\n\r\nexport interface CardProps {\r\n  card: CardData;\r\n}\r\n\r\nfunction Card({ card }: CardProps) {\r\n  return (\r\n    <div \r\n      className={\r\n        classNames({\r\n          'card': true,\r\n          'card--red': isCardRed(card.symbol),\r\n          'card--black': isCardBlack(card.symbol),\r\n          'card--back': !card.revealed,\r\n          'card--pointer': !card.revealed && !card.cardOnTop,\r\n        })\r\n      }\r\n    >\r\n      <div className=\"card__sign\">{cardValueSignsMap[card.value]}</div>\r\n      <div className=\"card__symbol\">{card.symbol}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","export const ItemTypes = {\r\n  CARD: 'CARD'\r\n}","import React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport { CardData } from '../../domain/CardData.model';\r\nimport { ItemTypes } from '../item.constants';\r\nimport classNames from 'classnames';\r\nimport './DropZone.css';\r\n\r\nexport interface DropZoneProps {\r\n  onDropHandler: (item: CardData) => void;\r\n  canDropPredicate: (item: CardData) => boolean;\r\n}\r\n\r\nfunction DropZone({ onDropHandler, canDropPredicate }: DropZoneProps) {\r\n  const [{ canDrop, isOver, isSomethingDragging }, drop] = useDrop(() => ({\r\n    accept: ItemTypes.CARD,\r\n    canDrop: canDropPredicate,\r\n    drop: onDropHandler,\r\n    collect: (monitor) => ({\r\n      isSomethingDragging: !!monitor.getClientOffset(),\r\n      isOver: monitor.isOver(),\r\n      canDrop: monitor.canDrop(),\r\n    })\r\n  }), [canDropPredicate, onDropHandler]);\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        classNames({\r\n          'card-well': true,\r\n          'card-well--can-drop': isOver && canDrop,\r\n          'card-well--can-not-drop': isOver && !canDrop,\r\n          'card-well--clickable': isSomethingDragging\r\n        })\r\n      }\r\n      ref={drop}\r\n      style={{ backgroundColor: isOver ? (canDrop ? 'yellowgreen' : 'red') : 'blue' }}\r\n    >\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropZone;\r\n","import React, { useCallback } from 'react';\r\nimport { useDrag } from 'react-dnd';\r\nimport { actions } from '../../store/gameSlice';\r\nimport { useAppDispatch } from '../../store/hooks';\r\nimport { CardData } from '../../domain/CardData.model';\r\nimport Card from '../Card/Card';\r\nimport DropZone from '../DropZone/DropZone';\r\nimport { ItemTypes } from '../item.constants';\r\nimport './CardDraggable.css';\r\nimport classNames from 'classnames';\r\n\r\nexport interface CardDraggableProps {\r\n  card: CardData;\r\n  canPutCardOnCard: (card: CardData, target: CardData) => boolean;\r\n  stacked?: boolean;\r\n}\r\n\r\nfunction CardDraggable({ card, ...pileProps }: CardDraggableProps) {\r\n  const dispatch  = useAppDispatch();\r\n\r\n  const [{ isDragging }, drag] = useDrag(() => ({\r\n    type: ItemTypes.CARD,\r\n    item: card,\r\n    canDrag: () => card.revealed,\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging()\r\n    })\r\n  }), [card]);\r\n\r\n  const onDropHandler = useCallback(\r\n    (item: CardData) => dispatch(actions.move({ cardId: item.id, targetId: card.id })),\r\n    [card]\r\n  );\r\n  const canDropPredicate = useCallback(\r\n    (item: CardData) => pileProps.canPutCardOnCard(item, card),\r\n    [card, pileProps.canPutCardOnCard]\r\n  );\r\n  const onClickHandler = useCallback(\r\n    () => {\r\n      if (!card.revealed && !card.cardOnTop)\r\n        dispatch(actions.reveal({ cardId: card.id }));\r\n    },\r\n    [card]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className=\"card-layout\"\r\n      ref={drag}\r\n      style={{ opacity: isDragging ? 0 : 1}}\r\n      onClick={onClickHandler}\r\n    >\r\n      <div className={\r\n        classNames({\r\n          'card-layout-item': true,\r\n          'card-layout-item--stacked': pileProps.stacked\r\n        })\r\n      }>\r\n        <Card card={card}/>\r\n      </div>\r\n      <div className=\"card-layout-item\">\r\n        {\r\n          card.cardOnTop\r\n          ? <CardDraggable card={card.cardOnTop} {...pileProps}/>\r\n          : <DropZone onDropHandler={onDropHandler} canDropPredicate={canDropPredicate}/>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardDraggable;","import React, { useCallback } from 'react';\r\nimport { CardData } from '../../domain/CardData.model';\r\nimport CardDraggable from '../CardDraggable/CardDraggable';\r\nimport Card from '../Card/Card';\r\nimport { actions } from '../../store/gameSlice';\r\nimport { useAppDispatch } from '../../store/hooks';\r\nimport './Deck.css';\r\n\r\nexport interface DeckProps {\r\n  stock: CardData[];\r\n  waste: CardData[];\r\n}\r\n\r\nfunction Deck({ stock, waste }: DeckProps) {\r\n  const dispatch  = useAppDispatch();\r\n\r\n  const onClickHandler = useCallback(\r\n    () => {\r\n      dispatch(actions.draw());\r\n    }, []\r\n  );\r\n\r\n  const canPutCardOnCard = () => false;\r\n\r\n  const firstCardOnStock = stock[0];\r\n  const prelastCardOnWaste = waste[waste.length - 2];\r\n  const lastCardOnWaste = waste[waste.length - 1];\r\n\r\n  return (\r\n    <div className=\"deck-container\">\r\n      <div onClick={onClickHandler}>\r\n        {\r\n          firstCardOnStock\r\n          ? <Card card={firstCardOnStock}/>\r\n          : <div className=\"deck-placeholder\"></div>\r\n        }\r\n      </div>\r\n      <div className=\"deck-waste\">\r\n        <div className=\"deck-waste-stacked\">\r\n          {\r\n            prelastCardOnWaste\r\n            ? <Card card={prelastCardOnWaste}/>\r\n            : null\r\n          }\r\n        </div>\r\n        <div>\r\n          {\r\n            lastCardOnWaste\r\n            ? <CardDraggable card={lastCardOnWaste} canPutCardOnCard={canPutCardOnCard}/>\r\n            : null\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Deck;","import React from 'react';\r\nimport { actions } from '../../store/gameSlice';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport './GameControl.css';\r\n\r\nexport function GameControl() {\r\n  const dispatch  = useAppDispatch();\r\n  const movesCounter = useAppSelector((state) => state.game.movesCounter);\r\n  const gameEnded = useAppSelector((state) => state.game.gameEnded);\r\n\r\n  const restart = () => dispatch(actions.restart())\r\n  \r\n  return (\r\n    <div className='game-control-bar'>\r\n      <button onClick={restart}>restart</button>\r\n      <div>Moves: {movesCounter}</div>\r\n      <div>{gameEnded ? \"You win!\" : null}</div>\r\n    </div>\r\n  )\r\n}","import React, { useCallback } from 'react';\r\nimport { CardData } from '../../domain/CardData.model';\r\nimport { actions } from '../../store/gameSlice';\r\nimport { useAppDispatch } from '../../store/hooks';\r\nimport CardDraggable from '../CardDraggable/CardDraggable';\r\nimport DropZone from '../DropZone/DropZone';\r\n\r\nimport './Pile.css';\r\n\r\nexport interface PileBaseProps {\r\n  id: string;\r\n  card?: CardData;\r\n  stacked?: boolean;\r\n  canPutCardOnCard: (card: CardData, target: CardData) => boolean;\r\n  canPutOnPileBase: (card: CardData) => boolean;\r\n}\r\n\r\nfunction PileBase({ id, card, stacked, canPutCardOnCard, canPutOnPileBase }: PileBaseProps) {\r\n  const dispatch  = useAppDispatch();\r\n\r\n  const onDropHandler = useCallback(\r\n    (item: CardData) => dispatch(actions.move({ cardId: item.id, targetId: id })),\r\n    [id]\r\n  );\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"card-placeholder\"></div>\r\n      {\r\n        card\r\n        ? <CardDraggable card={card} canPutCardOnCard={canPutCardOnCard} stacked={stacked}/>\r\n        : <DropZone onDropHandler={onDropHandler} canDropPredicate={canPutOnPileBase}/>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PileBase;","import React from 'react';\r\nimport { CardData } from '../../domain/CardData.model';\r\nimport { canPutCardOnFoundation, isAce } from '../../domain/CardData.utils';\r\nimport PileBase from './PileBase';\r\n\r\nexport interface FoundationProps {\r\n  id: string;\r\n  card?: CardData;\r\n}\r\n\r\nfunction Foundation(props: FoundationProps) {\r\n  const canPutOnPileBase = isAce;\r\n  const canPutCardOnCard = canPutCardOnFoundation;\r\n\r\n  return (\r\n    <PileBase {...props} canPutOnPileBase={canPutOnPileBase} canPutCardOnCard={canPutCardOnCard} stacked={true}/>\r\n  );\r\n}\r\n\r\nexport default Foundation;","import React from 'react';\r\nimport { CardData } from '../../domain/CardData.model';\r\nimport { isKing, canPutCardOnPile } from '../../domain/CardData.utils';\r\nimport PileBase from './PileBase';\r\n\r\nexport interface PileProps {\r\n  id: string;\r\n  card?: CardData;\r\n}\r\n\r\nfunction Pile(props: PileProps) {\r\n  const canPutOnPileBase = isKing;\r\n  const canPutCardOnCard = canPutCardOnPile;\r\n\r\n  return (\r\n    <PileBase {...props} canPutOnPileBase={canPutOnPileBase} canPutCardOnCard={canPutCardOnCard}/>\r\n  );\r\n}\r\n\r\nexport default Pile;","import React from 'react';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { selectGame } from '../../store/selectors';\r\nimport Deck from '../Deck/Deck';\r\nimport { GameControl } from '../GameControl/GameControl';\r\nimport Foundation from '../Pile/Foundation';\r\nimport Pile from '../Pile/Pile';\r\nimport './Game.css';\r\n\r\nfunction Game(props: any) {\r\n  const gameState = useAppSelector(selectGame);\r\n  \r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      <div className=\"tableau\">\r\n        <GameControl/>\r\n        <div className=\"top-container\">\r\n          <Deck stock={gameState.stock} waste={gameState.waste}/>\r\n          <div className=\"card-pile-row\">\r\n            <Foundation id={'f0'} card={gameState.foundations['f0']}/>\r\n            <Foundation id={'f1'} card={gameState.foundations['f1']}/>\r\n            <Foundation id={'f2'} card={gameState.foundations['f2']}/>\r\n            <Foundation id={'f3'} card={gameState.foundations['f3']}/>\r\n          </div>\r\n        </div>\r\n        <div className=\"card-pile-row\">\r\n          <Pile id={'p0'} card={gameState.piles['p0']}/>\r\n          <Pile id={'p1'} card={gameState.piles['p1']}/>\r\n          <Pile id={'p2'} card={gameState.piles['p2']}/>\r\n          <Pile id={'p3'} card={gameState.piles['p3']}/>\r\n          <Pile id={'p4'} card={gameState.piles['p4']}/>\r\n          <Pile id={'p5'} card={gameState.piles['p5']}/>\r\n          <Pile id={'p6'} card={gameState.piles['p6']}/>\r\n        </div>\r\n      </div>\r\n    </DndProvider>\r\n  );\r\n}\r\n\r\nexport default Game;","import { configureStore } from '@reduxjs/toolkit'\r\nimport { gameSlice } from './gameSlice'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    game: gameSlice.reducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nexport type AppDispatch = typeof store.dispatch;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport Game from './game/components/Game/Game';\nimport { store } from './game/store/store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Game />\n    </Provider>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}